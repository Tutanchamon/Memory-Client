/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * GlowneOkienko.java
 *
 * Created on 2012-04-07, 19:11:05
 */
package memory.client;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author blazej
 */
public class GlowneOkienko extends javax.swing.JFrame {

 /* atrybuty klasy */
    PrintWriter out = MemoryClient.out;
    BufferedReader in = MemoryClient.in;
    
 /******************/
    
    /** Creates new form GlowneOkienko */
    public GlowneOkienko() {
        initComponents();
        /* try {
            w = in.readLine();
            this.jTextArea1.setText(w);
        } catch (IOException ex) {
            Logger.getLogger(GlowneOkienko.class.getName()).log(Level.SEVERE, null, ex);
        }*/
        getFile();
        
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Okienko");

        jPanel2.setLayout(new java.awt.CardLayout());
        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String s = this.jTextField1.getText();
        out.println(s);
        this.jTextField1.setText("");
        
       /* try {
        String w = in.readLine();
        this.jTextArea1.setText(w);
        }
        catch (IOException ex){
            ex.printStackTrace();
        }*/
    }//GEN-LAST:event_jButton1ActionPerformed

   private void getFile(){
       int rozmiar;
       int odczytane;
       byte[] mybytearray = new byte[1024];
       try {
           InputStream buf = MemoryClient.is;
      /*     //System.out.println("Wczytuję z ina");
                       

           InputStream is = MemoryClient.is;
           FileOutputStream fos = new FileOutputStream("a.jpg");
           BufferedOutputStream bos = new BufferedOutputStream(fos);
       byte[] size = new byte[10];
       odczytane = is.read(size, 0, 5);
       System.out.println("Odczytane to: "+odczytane);
       String tresc = size.toString();
       System.out.println("Co jest w size: ");
       for (int i=0; i<5; i++){
           System.out.print(size[i]);
       }
        //   System.out.println("Tworzę FileWritera");
          // FileWriter f0 = new FileWriter(new File("b.jpg"));
           
           System.out.println("Piszę se do plika");
           //f0.write(w);  
           int bytesRead = is.read(mybytearray, 0, mybytearray.length);
           
           System.out.println("Zapisuję se plika");
          // f0.close();
           //bos.write(mybytearray, 0, bytesRead);
          // bos.close();
            * 
            */
           int count; 
           byte[] buffer = new byte[8192]; 
           FileOutputStream fos = new FileOutputStream("a.gif");
           BufferedOutputStream bos = new BufferedOutputStream(fos);
           
           while ((count = buf.read(buffer)) > 0){               
               System.out.print("Cos tam odczytuje");
               bos.write(buffer, 0, count);
               for (int i=0; i < buffer.length; i++){
           System.out.print(buffer[i]);
            }
           
           }
           bos.close();
           fos.close();
       }
       catch (Exception ex){
           ex.printStackTrace();
       }
   }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GlowneOkienko().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
