/*
* To change this template, choose Tools | Templates
* and open the template in the editor.
*/

/*
* GlowneOkienko.java
*
* Created on 2012-04-07, 19:11:05
*/
package memory.client;

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;


/**
*
* @author blazej
*/
public class GlowneOkienko extends javax.swing.JFrame {

 /* atrybuty klasy */
    PrintWriter out = MemoryClient.out;
    BufferedReader in = MemoryClient.in;
    
 /******************/
    
    /** Creates new form GlowneOkienko */
    public GlowneOkienko() {
        initComponents();
        /* try {
w = in.readLine();
this.jTextArea1.setText(w);
} catch (IOException ex) {
Logger.getLogger(GlowneOkienko.class.getName()).log(Level.SEVERE, null, ex);
}*/
        fileLoop();
        //getFile();
        getArrayElements();
        
    }

    /** This method is called from within the constructor to
* initialize the form.
* WARNING: Do NOT modify this code. The content of this method is
* always regenerated by the Form Editor.
*/
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Okienko");

        jPanel2.setLayout(new java.awt.CardLayout());
        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setText("jTextField1");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String s = this.jTextField1.getText();
        out.println(s);
        this.jTextField1.setText("");
        
       /* try {
String w = in.readLine();
this.jTextArea1.setText(w);
}
catch (IOException ex){
ex.printStackTrace();
}*/
    }//GEN-LAST:event_jButton1ActionPerformed

   private void getArray(){
       try {
           InputStream buf = MemoryClient.is;
           int odebrano;
           byte[] bufor = new byte[8];
       }
       
       catch(Exception ex){
           System.out.println("Błąd I/O");
           ex.printStackTrace();
       }
       
   }
   
   private void getArrayElements(){
        int ilosc = 30;
        
        int[] tablica = new int[30];
        byte[] bufor = new byte[2];
        InputStream buf = MemoryClient.is;
        for (int i = 0; i < ilosc; i++){
            try {
                //System.out.println("Próba nr "+i);
            int received = buf.read(bufor, 0, bufor.length);
            /*System.out.print("Zawartość bufora: ");
            System.out.print(bufor[i]);
            char mychar = (char) bufor[i];
            System.out.print(mychar);*/
            
            System.out.println();
            char[] charArr = (new String(bufor)).toCharArray();
               String numer_karty = String.copyValueOf(charArr);
              
                 double numer1 = Double.parseDouble(numer_karty);
                 int numer2 = (int) numer1;
               
               tablica[i] = numer2;
               System.out.println("Proba numer: "+i+"\tString numer_karty: "+numer_karty+"\t int numer2: "+numer2+"\t tablica["+i+"]: "+tablica[i]);
               
               MemoryClient.tablica = tablica;
            }
            catch (IOException ex){
                ex.printStackTrace();
            }
            
        }
    }
   private void fileLoop(){
       PrintWriter pr = MemoryClient.out;
       System.out.println("Wchodzę do pętli w fileLoop()");
       for (int i = 0; i < 16; i++){
           System.out.println("Wysyłam żądanie po plik "+i+".jpg");
           pr.println(i+".jpg");
           getFile(i+".jpg");
       }
       
       //System.out.println("Wysyłam ENOUGH");
       //pr.println("ENOUGH");
   } 
   
   
    
   private void getFile(String filename){
       double rozmiar;
       
       try {
           InputStream buf = MemoryClient.is;
      
           int count;
           int odebrano;
           byte[] buffer = new byte[8];
           
           //FileOutputStream fos = new FileOutputStream("lody.jpg");
             FileOutputStream fos = new FileOutputStream(filename);
           BufferedOutputStream bos = new BufferedOutputStream(fos);
           
           // odbieranie rozmiaru pliku
           odebrano = buf.read(buffer, 0, 8);
           System.out.println();
           for (int i=0; i < buffer.length; i++){
                System.out.print(buffer[i]);
                char mychar = (char) buffer[i];
                   System.out.print(mychar);
               }
               System.out.println();
               char[] charArr = (new String(buffer)).toCharArray();
               for (int j=0; j < charArr.length; j++){
                   System.out.print(charArr[j]);
               }
               System.out.println();
               String rozmiartemp = String.copyValueOf(charArr);
               System.out.println("Rozmiartemp: "+rozmiartemp);
               rozmiar = Double.parseDouble(rozmiartemp);
               System.out.println("Rozmiar pliku do pobrania wynosi: "+rozmiar);
               count = 0;
               
            int odebrano_razem = 0;
            int licznik = 0;
            int pozostalo = (int) rozmiar;
            System.out.println("Wchodzę do pętli pobierania pliku");
            while (odebrano_razem < rozmiar){
                
                byte[] dane = new byte[10240];
                
                if (pozostalo >= dane.length) licznik = buf.read(dane, 0, dane.length);
                if (pozostalo < dane.length) licznik = buf.read(dane, 0, pozostalo);
                if (licznik == 0 || licznik == -1) break;
                else System.out.println("Pobrano "+licznik+" bajtów danych");
                odebrano_razem += licznik;
                pozostalo -= licznik;
                System.out.println("Łącznie odebrano: "+odebrano_razem);
                System.out.println("Pozostało "+pozostalo);
                System.out.println("Dodawanie danych do pliku ");
                bos.write(dane, 0, licznik);
                                
               }
            if (odebrano_razem != rozmiar){
                System.out.println("Błąd w odbiorze pliku");
            }
            else {
                System.out.println("Plik odebrany poprawnie i zapisany jako "+filename);
            }
            System.out.println("Zamykam bos i fos");
            bos.close();
            fos.close();
               // poprzednio
           
           /*while ((count = buf.read(buffer)) > 0){
System.out.println("Cos tam odczytuję:");
bos.write(buffer, 0, count);
System.out.println("Poszedł bos.write()");
for (int i=0; i < buffer.length; i++){
System.out.print(buffer[i]);
char mychar = (char) buffer[i];
System.out.print(mychar);
}
System.out.println();
char[] charArr = (new String(buffer)).toCharArray();
for (int j=0; j < charArr.length; j++){
System.out.print(charArr[j]);
}
System.out.println();
String rozmiartemp = String.copyValueOf(charArr);
System.out.println("Rozmiartemp: "+rozmiartemp);
rozmiar = Double.parseDouble(rozmiartemp);
System.out.println("Rozmiar pliku do pobrania wynosi: "+rozmiar);
count = 0;
}*/
           
       }
       catch (IOException ex){
           ex.printStackTrace();
       }
       catch (NumberFormatException ex){
           System.out.append("Wywołał się NumberFormatException: ");
           ex.printStackTrace();
       }
       
   }
    
    
    /**
* @param args the command line arguments
*/
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
* For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
*/
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GlowneOkienko.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new GlowneOkienko().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
